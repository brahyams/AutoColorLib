#!groovy
import java.text.SimpleDateFormat

def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
def date = new Date()
def timestamp = dateFormat.format(date).toString()
def CORREOS = ""
def urlRepo=""
def rama="master"
def credenciales=""

pipeline {
    agent any
    stages {
        stage('Preparar Workspace'){
            steps{
                script{
                    env.WORKSPACE_LOCAL = bat(returnStdout: true, script: 'cd').trim()
                    env.BUILD_TIME = bat(returnStdout: true, script: 'date +/F-/T').trim()
                    echo "Workspace set to:" + env.WORKSPACE_LOCAL
                    echo "Build time:" + env.BUILD_TIME
                }
            }
        }

        stage('SonarQube analysis'){
            steps {
               script {
                        scannerHome = tool 'SonarQubeScanner'//mismo nombre del servidor configurado en las Global Tools Jenkins
               }
               withSonarQubeEnv('sonarQube')//mismo nombre del servidor configurado en la configuracion del sistema jenkins
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    try {
                        timeout(time: 1, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                            currentBuild.result = 'SUCCESS'
                        }
                    }
                    catch (ex) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Ejecutar Pruebas') {
            steps {
                script {
                    try {
              
                        bat("gradle clean test aggregate") //Ejecuci√≥n en agente windows sin parametro jenkins
                        echo 'Test Ejecutados sin Fallo'
                        currentBuild.result = 'SUCCESS'
                    }
                    catch (ex) {
                        echo 'Test Ejecutados con Fallo'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Generar evidencia'){
            steps{
                 script{
                     try{
                          bat  " rename \"${WORKSPACE}\\target\" serenity_${timestamp}"
                          echo 'Backup de evidencias realizado con exito'
                          publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: "${WORKSPACE}//serenity_${timestamp}",
                                reportFiles: 'index.html',
                                reportName: 'Evidencias Automatizacion WEB Screenplay',
                                reportTitles: 'Proyecto Mobiletec Screenplay'
                          ])
                                echo 'Reporte Serenity realizado con exito'
                                archiveArtifacts "**/cucumber.json"
                                cucumber '**/cucumber.json'
                                echo 'Reporte Cucumber realizado con exito'
                          }
                          catch(e){
                                echo 'No se realizo el Backup de evidencias'
                                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: "${WORKSPACE}//target/serenity_${timestamp}", reportFiles: 'index.html', reportName: 'Evidencias Automatizacion WEB Screenplay', reportTitles: 'Proyecto Mobiletec Screenplay'])
                                echo 'Reporte Html realizado con exito'
                                currentBuild.result='SUCCESS'
                          }
                 }
            }
        }
 
    }

}